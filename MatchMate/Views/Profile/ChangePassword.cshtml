@model MatchMate.Models.ProfileChangePasswordViewModel

@{
    ViewBag.Title = "Change Password";
}

<div class="container mt-5">
    <div class="row">
        <div class="col-md-6 mx-auto">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h2 class="mb-0">Change Password</h2>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("ChangePassword", "Profile", FormMethod.Post, new { @class = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group mb-3">
                            @Html.LabelFor(m => m.OldPassword, new { @class = "form-label" })
                            <div class="input-group">
                                @Html.PasswordFor(m => m.OldPassword, new { @class = "form-control", id = "oldPasswordField" })
                                <span class="input-group-text">
                                    <i class="fa fa-eye-slash" id="toggleOldPassword" style="cursor: pointer"></i>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(m => m.OldPassword, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mb-3">
                            @Html.LabelFor(m => m.NewPassword, new { @class = "form-label" })
                            <div class="input-group">
                                @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control", id = "newPasswordField" })
                                <span class="input-group-text">
                                    <i class="fa fa-eye-slash" id="toggleNewPassword" style="cursor: pointer"></i>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-danger" })

                            <div id="passwordRequirements" class="small mt-2">
                                <p class="mb-1">Password must meet the following requirements:</p>
                                <ul class="ps-3">
                                    <li id="length-req">At least 6 characters long</li>
                                    <li id="uppercase-req">At least one uppercase letter</li>
                                    <li id="lowercase-req">At least one lowercase letter</li>
                                    <li id="number-req">At least one number</li>
                                    <li id="special-req">At least one special character</li>
                                </ul>
                            </div>
                        </div>

                        <div class="form-group mb-4">
                            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "form-label" })
                            <div class="input-group">
                                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", id = "confirmPasswordField" })
                                <span class="input-group-text">
                                    <i class="fa fa-eye-slash" id="toggleConfirmPassword" style="cursor: pointer"></i>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                            <div id="passwordMatch" class="small mt-1"></div>
                        </div>

                        <div class="form-group d-flex justify-content-between">
                            <a href="@Url.Action("Index", "Profile")" class="btn btn-secondary">Cancel</a>
                            <button type="submit" class="btn btn-primary">Change Password</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const oldPasswordField = document.getElementById('oldPasswordField');
            const newPasswordField = document.getElementById('newPasswordField');
            const confirmPasswordField = document.getElementById('confirmPasswordField');
            const toggleOldPassword = document.getElementById('toggleOldPassword');
            const toggleNewPassword = document.getElementById('toggleNewPassword');
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            const lengthReq = document.getElementById('length-req');
            const uppercaseReq = document.getElementById('uppercase-req');
            const lowercaseReq = document.getElementById('lowercase-req');
            const numberReq = document.getElementById('number-req');
            const specialReq = document.getElementById('special-req');
            const passwordMatch = document.getElementById('passwordMatch');

            const requirements = [lengthReq, uppercaseReq, lowercaseReq, numberReq, specialReq];
            requirements.forEach(req => req.classList.add('text-danger'));

            toggleOldPassword.addEventListener('mousedown', function() {
                oldPasswordField.type = 'text';
                toggleOldPassword.classList.remove('fa-eye-slash');
                toggleOldPassword.classList.add('fa-eye');
            });

            document.addEventListener('mouseup', function() {
                oldPasswordField.type = 'password';
                toggleOldPassword.classList.remove('fa-eye');
                toggleOldPassword.classList.add('fa-eye-slash');
            });

            toggleNewPassword.addEventListener('mousedown', function() {
                newPasswordField.type = 'text';
                toggleNewPassword.classList.remove('fa-eye-slash');
                toggleNewPassword.classList.add('fa-eye');
            });

            document.addEventListener('mouseup', function() {
                newPasswordField.type = 'password';
                toggleNewPassword.classList.remove('fa-eye');
                toggleNewPassword.classList.add('fa-eye-slash');
            });

            toggleConfirmPassword.addEventListener('mousedown', function() {
                confirmPasswordField.type = 'text';
                toggleConfirmPassword.classList.remove('fa-eye-slash');
                toggleConfirmPassword.classList.add('fa-eye');
            });

            document.addEventListener('mouseup', function() {
                confirmPasswordField.type = 'password';
                toggleConfirmPassword.classList.remove('fa-eye');
                toggleConfirmPassword.classList.add('fa-eye-slash');
            });

            newPasswordField.addEventListener('input', function() {
                const password = newPasswordField.value;

                if (password.length >= 6) {
                    lengthReq.classList.remove('text-danger');
                    lengthReq.classList.add('text-success');
                } else {
                    lengthReq.classList.remove('text-success');
                    lengthReq.classList.add('text-danger');
                }


                if (/[A-Z]/.test(password)) {
                    uppercaseReq.classList.remove('text-danger');
                    uppercaseReq.classList.add('text-success');
                } else {
                    uppercaseReq.classList.remove('text-success');
                    uppercaseReq.classList.add('text-danger');
                }

                if (/[a-z]/.test(password)) {
                    lowercaseReq.classList.remove('text-danger');
                    lowercaseReq.classList.add('text-success');
                } else {
                    lowercaseReq.classList.remove('text-success');
                    lowercaseReq.classList.add('text-danger');
                }

                if (/\d/.test(password)) {
                    numberReq.classList.remove('text-danger');
                    numberReq.classList.add('text-success');
                } else {
                    numberReq.classList.remove('text-success');
                    numberReq.classList.add('text-danger');
                }

                if (/[^A-Za-z0-9]/.test(password)) {
                    specialReq.classList.remove('text-danger');
                    specialReq.classList.add('text-success');
                } else {
                    specialReq.classList.remove('text-success');
                    specialReq.classList.add('text-danger');
                }

                checkPasswordMatch();
            });

            confirmPasswordField.addEventListener('input', checkPasswordMatch);

            function checkPasswordMatch() {
                const password = newPasswordField.value;
                const confirmPassword = confirmPasswordField.value;

                if (confirmPassword === '') {
                    passwordMatch.innerHTML = '';
                    return;
                }

                if (password === confirmPassword) {
                    passwordMatch.innerHTML = 'Passwords match';
                    passwordMatch.classList.remove('text-danger');
                    passwordMatch.classList.add('text-success');
                } else {
                    passwordMatch.innerHTML = 'Passwords do not match';
                    passwordMatch.classList.remove('text-success');
                    passwordMatch.classList.add('text-danger');
                }
            }
        });
    </script>
}